
from init_var_classes_and_items import all_animals_classes_list, player_health_condition, weapons_dict, fruits_dict, plants_dict, game_launch, yellow_txt, normal_txt
from init_global_functions import sleep, clear, random_animal_assigned, next_instruction, erased_previous_input, alert_print

# --------------------------------------------- CREATION DU JOUEUR ET INTRODUCTION DU JEU ---------------------------------------------

def introduction_and_player_assignment():
    start_choice = "oui"
    tuto_has_been_passed = True
    time_factor_print = 0.8 # ----------------------- Facteur temps des prints de mise en sc√®ne

    if game_launch["state"] == "start":
        while True:
            clear()
            erased_previous_input()
            tuto_choice = input("Passer le tutoriel ? (oui) (non) ")
            if tuto_choice == "oui":
                break
            elif tuto_choice == "non":
                tuto_has_been_passed = tutorial()
                break
            else:
                alert_print("Choix indisponible !")

        while True:
            clear()
            erased_previous_input()
            start_choice = input("Passer l'intro ? (oui) (non) ")
            if start_choice == "oui" or start_choice == "non":
                break
            else:
                alert_print("Choix indisponible !")
    clear()
    if start_choice == "oui":
        time_factor_print = 0.2
    print("La partie va commencer !")
    sleep(1.5)
    for i in range(4):
        clear()
        print("Cr√©ation du plateau" + "." * i)
        sleep(time_factor_print)
    for i in range(4):
        clear()
        print("Attribution d'un animal al√©atoire" + "." * i)
        sleep(time_factor_print)

    player = random_animal_assigned(all_animals_classes_list).copy()  # ----------------------- Attribution al√©atoire d'un animal et de ses caract√©ristiques au joueur
    if tuto_has_been_passed == False:
        player["max_life"] += 20
        player["current_life"] = player["max_life"]

    player_health_condition["health_condition"] = "alive" # ----------------------- R√©initialisation de la condition de vie du joueur
    assigned_player_inventory(player)   # ----------------------- Inventaire assign√© √† la classe du joueur
    clear()
    game_launch["state"] = "played_once"
    print("Voici votre animal :", player["class_name"], "\n")
    sleep(1.5)

    if start_choice == "non": # ----------------------- Print de l'introduction
        print("Vous √™tes perdu.e en for√™t avec d'autres animaux hostiles.")
        sleep(3)
        print("Votre but est de survivre !\n")
        sleep(2.5)
        print("Pour cela, vous devrez affronter les autres animaux de cette for√™t et vous √©quiper d'objets et d'armes puissantes.\n")
        sleep(2.5)
        print("Si vous r√©ussissez √† passer la premi√®re partie, vous pourrez alors constituer votre √©quipe pour an√©antir le plus grand pr√©dateur de la for√™t : le Tigre.\n")
        sleep(2.5)
        print("Vous pourrez √©galement acheter et vendre des objets chez l'√©cureuil afin d'am√©liorer votre condition avant le combat final.\n")
        sleep(4.5)
        print("Si vous ne souhaitez pas mourir, lisez les informations suivantes attentivement...\n")

    print("Pour vous rep√©rer, vous √™tes represent√©.e par ce symbole sur la carte : ‚≠ï\n") # ----------------------- Print des explications des √©l√©ments de la carte
    sleep(0.6)
    print("Les combats : ‚ö°\n")
    sleep(0.6)
    print("Les √©changes : ‚õ∫\n")
    sleep(0.6)
    print("Les objets : ‚≠ê\n")
    sleep(0.6)
    print("Et peut-√™tre que votre animal poss√®de des comp√©tences sp√©ciales qui vont vous aider √† vous rep√©rer... la nuit ?")
    sleep(0.6)
    next_instruction()
    return player

# --------------------------------------------- CREATION DE L'INVENTAIRE DU JOUEUR ---------------------------------------------

def assigned_player_inventory(player):
    inventory_dict = {}
    inventory_dict["weapons"] = weapons_dict
    inventory_dict["fruits"] = fruits_dict
    inventory_dict["plants"] = plants_dict
    player["inventory"] = inventory_dict

# --------------------------------------------- TUTORIEL D'EXPLICATION POUR APPRENDRE A UTILISER LE JEU ---------------------------------------------

def tutorial():
    clear()
    print("Bienvenue dans le tutoriel de TIGER HOOD !\n")
    sleep(1)
    print("Ici, vous allez apprendre √† vous d√©placer, combattre et d√©couvrir les bases pour survivre !")
    next_instruction()
    print("Les d√©placements :\n")
    print("Les fl√®ches directionnelles de votre clavier vous permettent de vous d√©placer sur la carte.\n")
    print("                                         ‚Üë")
    print("                                       ‚Üê   ‚Üí")
    print("                                         ‚Üì")
    next_instruction()
    print("Les combats :\n")
    print("Le syst√®me de combat est un combat au tour par tour, mais avec une particularit√© √† lui.\n")
    print("Chaque tour, vous devrez choisir deux actions parmi les diff√©rentes actions possibles comme : (Attaque, D√©fense...)\n")
    print("Une fois ces actions s√©lectionn√©es, les deux actions seront lanc√©es √† la suite...\n")
    print("C'est ce que l'on appelle une manche !\n")
    next_instruction()
    print("Chaque manche ressemblera √† ceci :\n")
    print("Tour :    1\nManche :  1\n\nVie du joueur : 80 | Vie de l'ennemi:  90\n\nChoix du joueur   : Attaque\nChoix de l'ennemi : Attaque\n\nVous attaquez et l'ennemi aussi !\nVous √™tes plus lent !\nVous prenez 40 de d√©g√¢ts\n\nVous attaquez !\nVous faites 43 de d√©g√¢ts\n")
    print("\nChaque tour est une succession de deux manches.")
    next_instruction()
    print("L'inventaire et le march√© :\n")
    print("Lorsque que vous voudrez utiliser un objet dans votre inventaire ou acheter/vendre un objet au march√©...\n")
    print("Il vous faudra taper le nom de l'objet en question, sans fautes et avec les accents.\n")
    print("Un peu long mais on s'y habitue üòÖ\n")
    next_instruction()
    print("Vous avez suivi le tutoriel jusqu'au bout, bravo !")
    sleep(1.2)
    print("Pour vous remercier, voici un petit bonus : +20 de vie max pour votre personnage au lancement de cette partie !")
    next_instruction()
    return False